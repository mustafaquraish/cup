import "std/common.cup"
import "std/vector.cup"

enum BaseType {
    TYPE_INT,   // TODO: Remove this in favour of sized types
    TYPE_CHAR,

    TYPE_I8,
    TYPE_I16,
    TYPE_I32,
    TYPE_I64,

    TYPE_F64,

    TYPE_VOID,
    TYPE_ANY,

    NUM_BASE_TYPES, // Just to denote the end of "base" types

    TYPE_PTR,
    TYPE_ARRAY,
    TYPE_STRUCT,
    TYPE_UNION,

    NUM_TYPES,
};

struct Type {
    typ: int;
    ptr: Type*;
    struct_name: char*;
    size: int;
    base_offset: int;
    array_size: int;

    fields: Vector*; // Vector<Variable*>;
    methods: Vector*; // Vector<Node(AST_FUNC)*>;
    constructor: void*; // Node(AST_FUNC)*
};

fn size_for_base_type(typ: int): int {
    static_assert(NUM_BASE_TYPES == 9, "Exhaustive match in size_for_base_type");
    switch (typ) {
        case TYPE_INT:
        case TYPE_PTR:
        case TYPE_I64:
        case TYPE_F64: 
        case TYPE_ANY:
            return 8;

        case TYPE_CHAR:
        case TYPE_I8:
            return 1;

        case TYPE_I32: return 4;
        case TYPE_I16: return 2;
    }
    return 0;
}

fn size_for_type(typ: Type*): int {
    static_assert(NUM_BASE_TYPES == 9, "Exhaustive match in size_for_type");

    if (typ.typ < NUM_BASE_TYPES)
        return typ.size;
    if (typ.typ == TYPE_ARRAY) return typ.array_size * size_for_type(typ.ptr);
    if (typ.typ == TYPE_STRUCT) return typ.size;
    if (typ.typ == TYPE_UNION) return typ.size;
    if (typ.typ == TYPE_PTR) return typ.size;
    die(here, "Unknown type in size_for_type");
}

// TODO: Probably use an array for these
let _type_int: Type* = null;
let _type_i8: Type* = null;
let _type_i16: Type* = null;
let _type_i32: Type* = null;
let _type_i64: Type* = null;
let _type_f64: Type* = null;
let _type_char: Type* = null;
let _type_void: Type* = null;
let _type_any: Type* = null;

fn create_new_base_type(typ: int): Type* {
    let res: Type* = malloc(sizeof(Type));
    res.typ = typ;
    res.size = size_for_base_type(typ);
    return res;
}

fn type_new(typ: int): Type* {
    static_assert(NUM_BASE_TYPES == 9, "Exhaustive match in type_new");

    if (_type_int == null) { _type_int = create_new_base_type(TYPE_INT); }
    if (_type_i8 == null) { _type_i8 = create_new_base_type(TYPE_I8); }
    if (_type_i16 == null) { _type_i16 = create_new_base_type(TYPE_I16); }
    if (_type_i32 == null) { _type_i32 = create_new_base_type(TYPE_I32); }
    if (_type_i64 == null) { _type_i64 = create_new_base_type(TYPE_I64); }
    if (_type_f64 == null) { _type_f64 = create_new_base_type(TYPE_F64); }
    if (_type_char == null) { _type_char = create_new_base_type(TYPE_CHAR); }
    if (_type_void == null) { _type_void = create_new_base_type(TYPE_VOID); }
    if (_type_any == null) { _type_any = create_new_base_type(TYPE_ANY); }

    switch (typ) {
        case TYPE_INT: return _type_int;
        case TYPE_I8: return _type_i8;
        case TYPE_I16: return _type_i16;
        case TYPE_I32: return _type_i32;
        case TYPE_I64: return _type_i64;
        case TYPE_F64: return _type_f64;
        case TYPE_CHAR: return _type_char;
        case TYPE_VOID: return _type_void;
        case TYPE_ANY: return _type_any;
    }

    let t: Type* = malloc(sizeof(Type));
    t.typ = typ;
    t.size = size_for_base_type(typ);
    return t;
}

fn type_new_ptr(typ: int): Type* {
    let ptr = type_new(TYPE_PTR);
    ptr.ptr = type_new(typ);
    return ptr;
}

// This is named differently because it performs an allocation
fn create_type_string(typ: Type *): char* {
    let buf: char* = malloc(32);
    while (typ.typ == TYPE_PTR || typ.typ == TYPE_ARRAY) {
        strcat(buf, typ.typ == TYPE_PTR ? "*" : "[]");
        typ = typ.ptr;
    }

    static_assert(NUM_BASE_TYPES == 9, "Exhaustive match in create_type_string");

    switch (typ.typ) {
        case TYPE_INT:    strcat(buf, "int");           break;
        case TYPE_I8:     strcat(buf, "i8");            break;
        case TYPE_I16:    strcat(buf, "i16");           break;
        case TYPE_I32:    strcat(buf, "i32");           break;
        case TYPE_I64:    strcat(buf, "i64");           break;
        case TYPE_F64:    strcat(buf, "f64");           break;
        case TYPE_CHAR:   strcat(buf, "char");          break;
        case TYPE_VOID:   strcat(buf, "void");          break;
        case TYPE_ANY:    strcat(buf, "any");           break;
        case TYPE_STRUCT: strcat(buf, typ.struct_name); break;
        case TYPE_UNION:  strcat(buf, typ.struct_name); break;
        default: {
            die(here, "create_type_string: unknown type");
        }
    }

    return buf;
}

fn is_int_type(typ: Type*): int {
    static_assert(NUM_BASE_TYPES == 9, "Exhaustive match in is_int_type");

    switch (typ.typ) {
        case TYPE_INT:
        case TYPE_I8:
        case TYPE_I16:
        case TYPE_I32:
        case TYPE_I64:
        case TYPE_CHAR:
            return true;
    }
    return false;
}

fn is_float_type(typ: Type*): int {
    return typ.typ == TYPE_F64;
}

fn types_equal(a: Type*, b: Type*): int {
    if (a == null && b == null)
        return true;
    if (a == null || b == null)
        return false;
    if (a.typ == TYPE_ANY || b.typ == TYPE_ANY)
        return true;

    if (a.typ == b.typ) {
        // FIXME: if both are <anon> this might not be correct
        if (a.typ == TYPE_STRUCT || a.typ == TYPE_UNION)
            return streq(a.struct_name, b.struct_name);
        return types_equal(a.ptr, b.ptr);
    }
    return false;
}

fn is_struct_or_structptr(typ: Type*): int {
    if (typ.typ == TYPE_STRUCT || typ.typ == TYPE_UNION)
        return true;
    if (typ.typ == TYPE_PTR)
        if (typ.ptr.typ == TYPE_STRUCT || typ.ptr.typ == TYPE_UNION)
            return true;
    return false;
}

