import "compiler/builtins.cup"
import "compiler/ast.cup"
import "std/file.cup"

let gen_out_file: File*;
let gen_label_counter = -1; // So the labels start at 0

let gen_string_literals = vector_new();
let gen_float_literals = vector_new();
let gen_defer_stack = vector_new();

let gen_current_break = -2;

fn emit_asm4(msg1: char*, msg2: char*, msg3: char*, msg4: char*) {
    gen_out_file::write(msg1, strlen(msg1));
    gen_out_file::write(msg2, strlen(msg2));
    gen_out_file::write(msg3, strlen(msg3));
    gen_out_file::write(msg4, strlen(msg4));
}

fn emit_asm3(msg1: char*, msg2: char*, msg3: char*) {
    gen_out_file::write(msg1, strlen(msg1));
    gen_out_file::write(msg2, strlen(msg2));
    gen_out_file::write(msg3, strlen(msg3));
}

fn emit_asm2(msg1: char*, msg2: char*) {
    gen_out_file::write(msg1, strlen(msg1));
    gen_out_file::write(msg2, strlen(msg2));
}

fn emit_asm(msg: char*) {
    gen_out_file::write(msg, strlen(msg));
}

fn emit_num(num: int) {
    // FIXME: Just support printing negatives directly.
    if (num < 0) {
        emit_asm("-");
        num = -num;
    }
    gen_out_file::putu(num);
}

fn generate_syscall(num: int) {
    emit_asm("\tmov rax, "); emit_num(num); emit_asm("\n");
    emit_asm("\tsyscall\n");
}

fn subregister_for_type(typ: Type*): char* {
    let n = size_for_type(typ);
    if (n == 1) return "al";
    if (n == 2) return "ax";
    if (n == 4) return "eax";
    if (n == 8) return "rax";
    die(here, "Unsupported type size");
}

fn specifier_for_type(typ: Type*): char* {
    let n = size_for_type(typ);
    if (n == 1) return "byte";
    if (n == 2) return "word";
    if (n == 4) return "dword";
    if (n == 8) return "qword";
    putsln(create_type_string(typ));
    die(here, "Unsupported type size");
}

// Q&D hack to differentiate function/method names
let __func_name_buf: char[256];
fn get_func_name(func: Node*): char* {
    __func_name_buf[0] = 0;
    if (func.func.is_method) {
        let typ: Type* = func.func.method_of;
        strcat(__func_name_buf, "_");
        strcat(__func_name_buf, typ.struct_name);
        strcat(__func_name_buf, "_method_");
    }
	else if (func.func.is_constructor) {
		let typ: Type* = func.func.method_of;
        strcat(__func_name_buf, "new_");
		strcat(__func_name_buf, typ.struct_name);
		strcat(__func_name_buf, "_constructor_");
    }
	else {
        strcat(__func_name_buf, "func_");
    }
    strcat(__func_name_buf, func.func.name);
    return __func_name_buf;
}

fn generate_expression(node: Node*);

fn generate_binop_int_arith(node: Node*) {
    generate_expression(node.binary.rhs);
    emit_asm("\tpush rax\n");
    generate_expression(node.binary.lhs);
    emit_asm("\tpop rcx\n");

    let op: char* = null;
         if (node.typ == AST_PLUS) op = "add";
    else if (node.typ == AST_MINUS) op = "sub";
    else if (node.typ == AST_LSHIFT) op = "shl";
    else if (node.typ == AST_RSHIFT) op = "shr";
    else if (node.typ == AST_BWAND) op = "and";
    else if (node.typ == AST_BWOR) op = "or";
    else if (node.typ == AST_XOR) op = "xor";
    else if (node.typ == AST_MUL) op = "imul";
    else if (node.typ == AST_DIV) op = "idiv";
    else if (node.typ == AST_MOD) op = "idiv";
    else {
        putsln(node_type_to_string(node.typ));
        die(here, "Unsupported binary op in generate_binop_int_arith");
    }

    if (node.typ == AST_DIV || node.typ == AST_MOD) {
        emit_asm("\tcqo\n");
        emit_asm("\tidiv rcx\n");
        if (node.typ == AST_MOD)
            emit_asm("\tmov rax, rdx\n");
    } else if (node.typ == AST_LSHIFT || node.typ == AST_RSHIFT) {
        emit_asm3("\t", op, " rax, cl\n");

    } else {
        emit_asm3("\t", op, " rax, rcx\n");
    }
}

fn generate_binop_float_arith(node: Node*) {
    generate_expression(node.binary.rhs);
    emit_asm("\tsub rsp, 8\n");
    emit_asm("\tmovsd [rsp], xmm0\n");
    generate_expression(node.binary.lhs);
    emit_asm("\tmovsd xmm1, [rsp]\n");
    emit_asm("\tadd rsp, 8\n");

    let op: char* = null;
         if (node.typ == AST_PLUS) op = "addsd";
    else if (node.typ == AST_MINUS) op = "subsd";
    else if (node.typ == AST_MUL) op = "mulsd";
    else if (node.typ == AST_DIV) op = "divsd";
    else {
        putsln(node_type_to_string(node.typ));
        die(here, "Unsupported binary op in generate_binop_float_arith");
    }

    emit_asm3("\t", op, " xmm0, xmm1\n");
}

fn generate_cmp_int(node: Node*) {
    generate_expression(node.binary.rhs);
    emit_asm("\tpush rax\n");
    generate_expression(node.binary.lhs);
    emit_asm("\tpop rcx\n");
    emit_asm("\tcmp rax, rcx\n");
}

fn generate_cmp_float(node: Node*) {
    generate_expression(node.binary.rhs);
    emit_asm("\tsub rsp, 8\n");
    emit_asm("\tmovsd [rsp], xmm0\n");
    generate_expression(node.binary.lhs);
    emit_asm("\tmovsd xmm1, [rsp]\n");
    emit_asm("\tadd rsp, 8\n");
    emit_asm("\tucomisd xmm0, xmm1\n");
}

fn generate_binop(node: Node*) {
    let s_op: char*;
    let u_op: char*;
         if (node.typ == AST_EQ) { s_op = "sete"; u_op = "sete"; }
    else if (node.typ == AST_LT) { s_op = "setl"; u_op = "setb"; }
    else if (node.typ == AST_GT) { s_op = "setg"; u_op = "seta"; }
    else if (node.typ == AST_NEQ) { s_op = "setne"; u_op = "setne"; }
    else if (node.typ == AST_LEQ) { s_op = "setle"; u_op = "setna"; }
    else if (node.typ == AST_GEQ) { s_op = "setge"; u_op = "setnb"; }
    else {
        if (is_float_type(node.etyp)) {
            return generate_binop_float_arith(node);
        }
        // Assume it's a an arithmetic operation
        return generate_binop_int_arith(node);
    }

    if (is_float_type(node.binary.rhs.etyp)) {
        generate_cmp_float(node);
        emit_asm3("\t", u_op, " al\n");
    } else {
        generate_cmp_int(node);
        emit_asm3("\t", s_op, " al\n");
    }
    emit_asm("\tmovzx rax, al\n");
}


fn generate_lvalue_into_rax(node: Node*) {
    if (node.typ == AST_LOCAL_VAR) {
        let offset = node.variable.offset;
        emit_asm("\tmov rax, rbp\n");
        emit_asm("\tsub rax, "); emit_num(offset); emit_asm("\n");
    } else if (node.typ == AST_GLOBAL_VAR) {
        let offset = node.variable.offset;
        emit_asm("\tmov rax, qword gvars\n");
        emit_asm("\tadd rax, "); emit_num(offset); emit_asm("\n");
    } else if (node.typ == AST_MEMBER) {
        let offset = node.member.offset;
        if (node.member.is_ptr)
            generate_expression(node.member.obj);
        else
            generate_lvalue_into_rax(node.member.obj);
        emit_asm("\tadd rax, "); emit_num(offset); emit_asm("\n");
    } else if (node.typ == AST_DEREF) {
        generate_expression(node.unary);
    } else {
        die2(here, "Unsupported type in generate_lvalue_into_rax: ", node_type_to_string(node.typ));
    }
}

fn generate_function_call(node: Node*) {
    let total_size = 0;
    let n = node.call.args.size;
    for (let i = n-1; i >= 0; --i) {
        let expr: Node* = node.call.args::at(i);
        generate_expression(expr);
        if (is_float_type(expr.etyp)) {
            emit_asm("\tsub rsp, 8\n");
            emit_asm("\tmovsd [rsp], xmm0\n");
        } else {
            emit_asm("\tpush rax\n");
        }

        // TODO: this might be an issue if we pass structs some day
        total_size = total_size + 8;
    }
    let name: char* = get_func_name(node.call.func);
    emit_asm3("\tcall ", name, "\n");
    emit_asm("\tadd rsp, "); emit_num(total_size); emit_asm("\n");
}

fn generate_expression(node: Node*) {
    if (node.typ == AST_LITERAL) {
        if (node.etyp.typ == TYPE_INT) {
            emit_asm("\tmov rax, "); emit_num(node.literal.as_int); emit_asm("\n");
        } else if (node.etyp.typ == TYPE_CHAR) {
            emit_asm("\tmov rax, "); emit_num(node.literal.as_char); emit_asm("\n");
        } else if (node.etyp.typ == TYPE_PTR) {
            let s = node.literal.as_string;
            let idx = gen_string_literals.size;
            gen_string_literals::push(s);
            emit_asm("\tmov rax, qword gs_"); emit_num(idx); emit_asm("\n");
        } else if (node.etyp.typ == TYPE_F64) {
            let s = node.literal.as_string;
            let idx = gen_float_literals.size;
            gen_float_literals::push(s);
            emit_asm("\tmov rax, [qword gf_"); emit_num(idx); emit_asm("]\n");
            emit_asm("\tmov [rsp-8], rax\n");
            emit_asm("\tmovsd xmm0, [rsp-8]\n");
        } else {
            die(here, "Unsupported literal type in generate_expression");
        }
    } else if (node.typ == AST_ADDROF) {
        generate_lvalue_into_rax(node.unary);

    } else if (node.typ == AST_CONDITIONAL) {
        let label = ++gen_label_counter;
        generate_expression(node.conditional.cond);
        emit_asm("\tcmp rax, 0\n");
        emit_asm("\tje .cond_else_"); emit_num(label); emit_asm("\n");
        generate_expression(node.conditional.then);
        emit_asm("\tjmp .cond_end_"); emit_num(label); emit_asm("\n");
        emit_asm(".cond_else_"); emit_num(label); emit_asm(":\n");
        generate_expression(node.conditional.els);
        emit_asm(".cond_end_"); emit_num(label); emit_asm(":\n");

    } else if (node.typ == AST_OR) {
        // With short circuiting!
        let label = ++gen_label_counter;
        generate_expression(node.binary.lhs,);
        // If left is true, we can short-circuit
        emit_asm("\tcmp rax, 0\n");
        emit_asm("\tje .or_right_"); emit_num(label); emit_asm("\n");
        emit_asm("\tmov rax, 1\n");
        emit_asm("\tjmp .or_end_"); emit_num(label); emit_asm("\n");
        emit_asm(".or_right_"); emit_num(label); emit_asm(":\n");
        generate_expression(node.binary.rhs);
        // Booleanize the result
        emit_asm("\tcmp rax, 0\n");
        emit_asm("\tsetne al\n");
        emit_asm(".or_end_"); emit_num(label); emit_asm(":\n");

    } else if (node.typ == AST_AND) {
        let label = ++gen_label_counter;
        generate_expression(node.binary.lhs);
        // If left is false, we can short-circuit
        emit_asm("\tcmp rax, 0\n");
        emit_asm("\tjne .and_right_"); emit_num(label); emit_asm("\n");
        emit_asm("\tmov rax, 0\n");
        emit_asm("\tjmp .and_end_"); emit_num(label); emit_asm("\n");
        emit_asm(".and_right_"); emit_num(label); emit_asm(":\n");
        generate_expression(node.binary.rhs);
        // Booleanize the result
        emit_asm("\tcmp rax, 0\n");
        emit_asm("\tsetne al\n");
        emit_asm(".and_end_"); emit_num(label); emit_asm(":\n");

    } else if (is_lvalue(node.typ)) {
        let node_sz = size_for_type(node.etyp);
        generate_lvalue_into_rax(node);
        if (is_float_type(node.etyp)) {
            emit_asm("\tmovsd xmm0, [rax]\n");
        } else if (node_sz == 8) {
            emit_asm("\tmov rax, [rax]\n");
        } else if (node_sz == 4) {
            emit_asm("\tmovsxd rax, dword [rax]\n");
        } else {
            emit_asm3("\tmovsx rax, ", specifier_for_type(node.etyp), " [rax]\n");
        }

    } else if (is_binary_op(node.typ)) {
        generate_binop(node);

    } else if (node.typ == AST_BWINV) {
        generate_expression(node.unary);
        emit_asm("\tnot rax\n");

    } else if (node.typ == AST_NEG) {
        generate_expression(node.unary);
        if (is_float_type(node.unary.etyp)) {
            emit_asm("\txorps xmm1, xmm1\n");
            emit_asm("\tsubps xmm1, xmm0\n");
            emit_asm("\tmovsd xmm0, xmm1\n");
        } else {
            emit_asm("\tneg rax\n");
        }

    } else if (node.typ == AST_NOT) {
        generate_expression(node.unary);
        emit_asm("\tcmp rax, 0\n");
        emit_asm("\tsete al\n");
        emit_asm("\tmovzx rax, al\n");

    } else if (node.typ == AST_ASSIGN) {
        let var = node.assign.lhs;
        generate_lvalue_into_rax(var);
        emit_asm("\tpush rax\n");
        generate_expression(node.assign.rhs);
        emit_asm("\tpop rcx\n");
        if (is_float_type(node.assign.rhs.etyp)) {
            emit_asm("\tmovsd [rcx], xmm0\n");
        } else {
            emit_asm3("\tmov [rcx], ", subregister_for_type(var.etyp), "\n");
        }

    } else if (node.typ == AST_FUNCCALL) {
        generate_function_call(node);

    } else if (node.typ == AST_CONVERT) {
        if (is_int_type(node.etyp) && is_float_type(node.unary.etyp)) {
            generate_expression(node.unary);
            emit_asm("\tcvttsd2si rax, xmm0\n");
        } else if (is_float_type(node.etyp) && is_int_type(node.unary.etyp)) {
            generate_expression(node.unary);
            emit_asm("\tcvtsi2sd xmm0, eax\n");
        } else {
            die(here, "Unsupported conversion");
        }
    } else {
        die2(here, "Unsupported node type in generate_expression: ", node_type_to_string(node.typ));
    }
}

fn generate_block(node: Node*);
fn generate_statement(node: Node*);

fn generate_switch_statement(node: Node*) {
    let label = ++gen_label_counter;
    let prev_break = gen_current_break;
    gen_current_break = label;

    generate_expression(node.switch_stmt.expr); // Guaranteed to be an integer in `rax`
    let all_cases = node.switch_stmt.cases;
    for (let i = 0; i < all_cases.size; ++i) {
        let cur_case: Node* = all_cases::at(i);
        let case_value = cur_case.case_stmt.val;
        emit_asm("\tcmp rax, "); emit_num(case_value); emit_asm("\n");
        emit_asm("\tje .case_"); emit_num(label); emit_asm("_"); emit_num(i); emit_asm("\n");
    }
    emit_asm("\tjmp .default_"); emit_num(label); emit_asm("\n");

    for (let i = 0; i < all_cases.size; ++i) {
        let cur_case: Node* = all_cases::at(i);
        let case_value = cur_case.case_stmt.val;
        emit_asm(".case_"); emit_num(label); emit_asm("_"); emit_num(i); emit_asm(":\n");

        let stmts = cur_case.case_stmt.children;
        for (let j = 0; j < stmts.size; ++j)
            generate_statement(stmts::at(j));
    }
    emit_asm(".default_"); emit_num(label); emit_asm(":\n");
    let defolt = node.switch_stmt.defolt;
    if (defolt) {
        for (let i = 0; i < defolt.size; ++i)
            generate_statement(defolt::at(i));
    }
    emit_asm("\t.break_"); emit_num(label); emit_asm(":\n");

    gen_current_break = label;
}


fn generate_statement(node: Node*) {
    static_assert(NUM_NODE_TYPES == 45, "Exhaustive match for node types in code generation.");

    if (node.typ == AST_RETURN) {
        if (node.unary) {
            generate_expression(node.unary);
        } else {
            emit_asm("\txor rax, rax\n"); // Default to 0
        }

        emit_asm("\tpush rax\n");
        // We want to "pop off" the defer stack so that nested defers don't loop
        // forever, but we'll restore it after the generating these
        let prev_defer_count = gen_defer_stack.size;
        while (gen_defer_stack.size > 0) {
            generate_statement(gen_defer_stack::pop());
        }
        gen_defer_stack.size = prev_defer_count;
        emit_asm("\tpop rax\n");

        emit_asm("\tmov rsp, rbp\n");
        emit_asm("\tpop rbp\n");
        emit_asm("\tret\n");
    } else if (node.typ == AST_VARDECL) {
        if (node.var_decl.init) {
            generate_expression(node.var_decl.init);
            let offset = node.var_decl.var.offset;
            if (is_float_type(node.var_decl.init.etyp)) {
                emit_asm("\tmovsd [rbp-"); emit_num(offset); emit_asm("], xmm0\n");
            } else {
                emit_asm("\tmov [rbp-"); emit_num(offset); emit_asm3("], ", subregister_for_type(node.var_decl.var.typ), "\n");
            }
        }
    } else if (node.typ == AST_BLOCK) {
        generate_block(node);

    } else if (node.typ == AST_DEFER) {
        gen_defer_stack::push(node.unary);

    } else if (node.typ == AST_BREAK) {
        if (gen_current_break < 0)
            die(here, "Break outside of loop, should have been caught by parser.");

        // FIXME: Need to run defers here before exiting the scopes.
        if (gen_defer_stack.size > 0)
            putsln("WARNING: 'defer' does not work in loops with break statements, you have been warned.");

        emit_asm("\tjmp .break_"); emit_num(gen_current_break); emit_asm("\n");

    } else if (node.typ == AST_IF) {
        let label = ++gen_label_counter;
        generate_expression(node.conditional.cond);
        // If we don't have an `else` clause, we can simplify
        if (node.conditional.els == null) {
            emit_asm("\tcmp rax, 0\n");
            emit_asm("\tje .if_end_"); emit_num(label); emit_asm("\n");
            generate_statement(node.conditional.then);
            emit_asm(".if_end_"); emit_num(label); emit_asm(":\n");
        } else {
            emit_asm("\tcmp rax, 0\n");
            emit_asm("\tje .if_else_"); emit_num(label); emit_asm("\n");
            generate_statement(node.conditional.then);
            emit_asm("\tjmp .if_end_"); emit_num(label); emit_asm("\n");
            emit_asm(".if_else_"); emit_num(label); emit_asm(":\n");
            generate_statement(node.conditional.els);
            emit_asm(".if_end_"); emit_num(label); emit_asm(":\n");
        }
    } else if (node.typ == AST_WHILE) {
        let label = ++gen_label_counter;
        let prev_break = gen_current_break;
        gen_current_break = label;
        emit_asm(".loop_start_"); emit_num(label); emit_asm(":\n");
        emit_asm(".loop_continue_"); emit_num(label); emit_asm(":\n");
        generate_expression(node.looop.cond);
        emit_asm("\tcmp rax, 0\n");
        emit_asm("\tje .loop_end_"); emit_num(label); emit_asm("\n");
        generate_statement(node.looop.body);
        emit_asm("\tjmp .loop_start_"); emit_num(label); emit_asm("\n");
        emit_asm(".break_"); emit_num(label); emit_asm(":\n");
        emit_asm(".loop_end_"); emit_num(label); emit_asm(":\n");
        gen_current_break = prev_break;

    } else if (node.typ == AST_SWITCH) {
        generate_switch_statement(node);

    } else if (node.typ == AST_FOR) {
        let label = ++gen_label_counter;
        let prev_break = gen_current_break;
        gen_current_break = label;
        if (node.looop.init)
            generate_statement(node.looop.init);
        emit_asm(".loop_start_"); emit_num(label); emit_asm(":\n");
        if (node.looop.cond) {
            generate_expression(node.looop.cond);
            emit_asm("\tcmp rax, 0\n");
            emit_asm("\tje .loop_end_"); emit_num(label); emit_asm("\n");
        }
        generate_statement(node.looop.body);
        emit_asm(".loop_continue_"); emit_num(label); emit_asm(":\n");
        if (node.looop.step)
            generate_statement(node.looop.step);
        emit_asm("\tjmp .loop_start_"); emit_num(label); emit_asm("\n");
        emit_asm(".break_"); emit_num(label); emit_asm(":\n");
        emit_asm(".loop_end_"); emit_num(label); emit_asm(":\n");
        gen_current_break = prev_break;

    } else {
        // Default to a simple expression statement
        generate_expression(node);
    }
}

fn generate_block(node: Node*) {
    let prev_defer_count = gen_defer_stack.size;

    let n = node.block.children.size;
    for (let i = 0; i < n; ++i) {
        generate_statement(node.block.children::at(i));
    }

    // Undo the defer stack
    while (gen_defer_stack.size > prev_defer_count) {
        generate_statement(gen_defer_stack::pop());
    }
}

fn generate_function(node: Node*) {
    // Skip declarations
    if (node.func.body == null)
        return;

    let name: char* = get_func_name(node);
    emit_asm2(name, ":\n");
    emit_asm("\tpush rbp\n");
    emit_asm("\tmov rbp, rsp\n");
    emit_asm("\tsub rsp, "); emit_num(node.func.max_locals_size); emit_asm("\n");

    generate_block(node.func.body);

    emit_asm("\tmov rsp, rbp\n");
    emit_asm("\tpop rbp\n");
    // Return 0 by default if we don't have a return statement
    emit_asm("\tmov qword rax, 0\n");
    emit_asm("\tret\n");
}

fn generate_program(ast: Node*, file: File*) {
    gen_out_file = file;

    let n = ast.block.children.size;
    for (let i = 0; i < n; ++i) {
        let node: Node* = ast.block.children::at(i);
        if (node.typ == AST_FUNC) {
            generate_function(node);
        } else if (node.typ == AST_VARDECL) {
            // Do nothing
        } else {
            die(here, "Unknown node type in generate_program");
        }
    }

    if (OS_IS_MACOS) {
        emit_asm("global _main\n");
        emit_asm("_main:\n");
        // Push envp
        emit_asm("\tmov rax, rdx\n");
        emit_asm("\tpush rax\n");
        // Push argv
        emit_asm("\tmov rax, rsi\n");
        emit_asm("\tpush rax\n");
        // Push argc
        emit_asm("\tmov rax, rdi\n");
        emit_asm("\tpush rax\n");
    } else {
        emit_asm("global _start\n");
        emit_asm("_start:\n");

        emit_asm("\tmov rbp, rsp\n");
        // Push envp
        emit_asm("\tmov rax, [rbp]\n");
        emit_asm("\tadd rax, 2\n");
        emit_asm("\tshl rax, 3\n");
        emit_asm("\tadd rax, rbp\n");
        emit_asm("\tpush rax\n");
        // Push argv
        emit_asm("\tmov rax, rbp\n");
        emit_asm("\tadd rax, 8\n");
        emit_asm("\tpush rax\n");
        // Push argc
        emit_asm("\tmov rax, [rbp]\n");
        emit_asm("\tpush rax\n");
    }

    // Initialize all the global variables
    for (let i = 0; i < n; ++i) {
        let node: Node* = ast.block.children::at(i);
        if (node.typ == AST_VARDECL && node.var_decl.init) {
            let expr = node.var_decl.init;
            generate_expression(node.var_decl.init);
            let offset = node.var_decl.var.offset;
            emit_asm("\tmov rcx, qword gvars\n");
            emit_asm("\tadd rcx, "); emit_num(offset); emit_asm("\n");
            emit_asm3("\tmov [rcx], ", subregister_for_type(expr.etyp), "\n");
        }
    }

    emit_asm("\tcall func_main\n");
    emit_asm("\tmov rdi, rax\n");
    generate_syscall(SYS_exit);

    generate_builtins();

    emit_asm("section .bss\n");
    emit_asm("\tgvars: resb "); emit_num(p_global_offset); emit_asm("\n");

    // Global strings
    emit_asm("section .data\n");
    for (let i = 0; i < gen_string_literals.size; ++i) {
        emit_asm("\tgs_"); emit_num(i); emit_asm(": db ");
        let s: char* = gen_string_literals::at(i);
        while (*s) { emit_num(*s); emit_asm(","); ++s; }
        emit_asm("0\n");
    }
    for (let i = 0; i < gen_float_literals.size; ++i) {
        emit_asm("\tgf_"); emit_num(i);
        emit_asm3(": dq ", gen_float_literals::at(i), "\n");
    }
}