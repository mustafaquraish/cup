import "std/file.cup"
// FIXME: The order of the following lines is important.
//        Perhaps have multiple passes?
import "compiler/builtins.cup"
import "compiler/parser.cup"
import "compiler/codegen.cup"

// FIXME: Allow variables functions to be static to a file?
//        we can avoid the prefixes then.
const MAX_STDIN_SOURCE_LEN = 4096;
let m_filename: char*;
let m_output_filename = "build/output";
let m_source: char*;
let m_source_len = 0;
let m_dump_ast = false;
let m_run_exec = false;
let m_silent = false;

fn print_usage_and_exit(name: char*, status: int) {
    puts("Usage: "); puts(name); putsln(" [options] <file>");
    putsln("Options:");
    putsln("  -c <code>  Code to compile");
    putsln("  -h         Show this help");
    putsln("  -s         Silence debug output");
    putsln("  -r         Run the generated executable");
    putsln("  -o <file>  Output file");
    putsln("  -d         Dump AST to stdout");
    puts("Output file will be named '"); puts(m_output_filename); putsln("' by default");
    exit(status);
}

fn parse_cli_args(argc: int, argv: char**): char** {
    for (let i = 1; i < argc; ++i) {
        if (streq(argv[i], "-c")) {
            m_source_len = strlen(argv[i+1]);
            m_source = argv[i+1];
            ++i;
            m_filename = "CLI";
        } else if (streq(argv[i], "-s")) {
            m_silent = true;
        } else if (streq(argv[i], "-r")) {
            m_run_exec = true;
        } else if (streq(argv[i], "-h")) {
            print_usage_and_exit(argv[0], 0);
        } else if (streq(argv[i], "-d")) {
            m_dump_ast = true;
        } else if (streq(argv[i], "-o")) {
            ++i;
            m_output_filename = argv[i];
        } else if (m_filename == null) {
            if (streq(argv[i], "-")) {
                m_filename = "stdin";
                m_source = malloc(MAX_STDIN_SOURCE_LEN);
                m_source_len = read(0, m_source, MAX_STDIN_SOURCE_LEN);
                m_source[m_source_len] = 0;
                if (m_source_len == MAX_STDIN_SOURCE_LEN) {
                    putsln("Source too long to use through stdin");
                    exit(1);
                }
            } else {
                m_filename = argv[i];
                let file = fopen(m_filename, 'r');
                m_source = file::slurp(&m_source_len);
                file::close();
            }
        } else if (!m_run_exec) {
            // No `-r` option passed, we shouldn't have any extra args.
            print_usage_and_exit(argv[0], 1);
        } else {
            // Any extra args with `-r` are passed to the executable.
            return argv + i;
        }
    }
    if (m_filename == null) {
        print_usage_and_exit(argv[0], 1);
    }
    return argv + argc;
}

fn file_exists(name: char *): int {
    // FIXME: probably use something like "access" instead of "open"
    let fd = open(name, O_RDONLY, 0);
    if (fd == -1) return false;
    close(fd);
    return true;
}

fn main(argc: int, argv: char **): int {
    let subproc_args = parse_cli_args(argc, argv);
    
    let lexer = lexer_new(m_filename, m_source, m_source_len);
    let ast = parse_program(lexer);

    if (m_dump_ast)
        dump_ast(ast, 0);

    let asm_filename: char[256];
    strcpy(asm_filename, m_output_filename);
    replace_extension(asm_filename, ".yasm");

    let out_file = fopen(asm_filename, 'w');
    generate_program(ast, out_file);
    out_file::close();   // Want to flush before we assemble.

    let obj_filename: char[256];
    strcpy(obj_filename, m_output_filename);
    replace_extension(obj_filename, ".o");

    let full_cmd_args: char*[10];

    // leverage /usr/bin/env as an easy way to invoke yasm/ld anywhere in PATH
    // the long term solution should be a method in the std library to
    // find a program in the PATH
    let have_bin_env = file_exists("/usr/bin/env");

    // FIXME: Is there a way to do this without hardcoding the exact path?
    if (have_bin_env) {
        full_cmd_args[0] = "/usr/bin/env";
    }
    let yasm_bin = have_bin_env ? "yasm" : (OS_IS_MACOS ? "/usr/local/bin/yasm" : "/usr/bin/yasm");
    let cmd_args: char** = full_cmd_args + have_bin_env;
    cmd_args[0] = "yasm";
    cmd_args[1] = OS_IS_MACOS ? "-fmacho64" : "-felf64";
    cmd_args[2] = "-o";
    cmd_args[3] = obj_filename;
    cmd_args[4] = asm_filename;
    cmd_args[5] = null;
    run_command(full_cmd_args, !m_silent);

    cmd_args = full_cmd_args + have_bin_env;
    cmd_args[0] = have_bin_env ? "ld" : "/usr/bin/ld";
    cmd_args[1] = "-o";
    cmd_args[2] = m_output_filename;
    cmd_args[3] = obj_filename;
    if (OS_IS_MACOS)
        cmd_args[4] = "-lSystem";
    else
        cmd_args[4] = null;
    cmd_args[5] = null;
    run_command(full_cmd_args, !m_silent);

    if (m_run_exec) {
        --subproc_args; // Always valid
        subproc_args[0] = m_output_filename;
        run_command(subproc_args, !m_silent);
    }

    // puts("---------------------------\n");
    // puts("Total amount of memory used by malloc: ");
    // putu(__malloc_buf_pos);
    // putsln("\nDone.");
}