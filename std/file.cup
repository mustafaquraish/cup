import "std/common.cup"
import "std/memory.cup"

const __FILE_BUFFER_CAP = 1024;

struct File {
    fd: int;
    name: char*;
    // Buffer
    buffer: char[__FILE_BUFFER_CAP];
    buffer_size: int;
};

fn fopen(name: char*, mode: char): File* {
    let open_mode: int;
         if (mode == 'w') open_mode = O_WRONLY | O_CREAT | O_TRUNC;
    else if (mode == 'r') open_mode = O_RDONLY;
    else                  die(here, "Unknown file open mode");

    let f: File* = malloc(sizeof(File));
    f.name = name;
    f.fd = open(name, open_mode, 0o666);
    if (f.fd < 0)
        die2(here, "Could not open file: ", name);
    f.buffer_size = 0;
    return f;
}

method File::flush() {
    if (self.buffer_size > 0) {
        let n = write(self.fd, self.buffer, self.buffer_size);
        if (n < 0)
            die2(here, "Could not write to file: ", self.name);
        self.buffer_size = 0;
    }
}

method File::write(buf: void*, size: int) {
    if (self.buffer_size + size > __FILE_BUFFER_CAP)
        self::flush();
    if (size > __FILE_BUFFER_CAP) {
        write(self.fd, buf, size);
    } else {
        memcpy(self.buffer + self.buffer_size, buf, size);
        self.buffer_size = self.buffer_size + size;
    }
}

method File::read(buf: void*, size: int): int {
    let n = read(self.fd, buf, size);
    if (n < 0)
        die2(here, "Could not read from file: ", self.name);
    return n;
}

method File::close() {
    self::flush();
    close(self.fd);
    self.fd = -1;
}

method File::puts(s: char*) {
    self::write(s, strlen(s));
}

method File::putc(c: char) {
    self::write(&c, 1);
}

method File::putu(n: int) {
    let buf: char[32];
    let len = putu_buffer(n, buf);
    self::write(buf, len);
}

method File::seek(offset: int, whence: int) {
    let n = lseek(self.fd, offset, whence);
    if (n < 0)
        die2(here, "Could not seek in file: ", self.name);
}

// Resets file position to the beginning of the file
method File::size(): int {
    let pos = lseek(self.fd, 0, SEEK_CUR);
    let size = lseek(self.fd, 0, SEEK_END);
    lseek(self.fd, pos, SEEK_SET);
    return size;
}

// Map file to memory and return pointer
method File::map(sizeptr: int*): char* {
    let size = self::size();
    let ptr = mmap(null, size, PROT_READ, MAP_PRIVATE, self.fd, 0);
    if (ptr == MAP_FAILED)
        die2(here, "Could not map file: ", self.name);
    if (sizeptr) *sizeptr = size;
    return ptr;
}

method File::slurp(sizeptr: int*): char* {
    let size = self::size();
    let text: char* = malloc(size + 1);
    self::read(text, size);
    text[size] = 0;
    if (sizeptr) *sizeptr = size;
    return text;
}