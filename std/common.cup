
const true = 1;
const false = 0;

// This should really be a constant, but we only allow integers...
let null: void*; // Zero initialized by default.

///////////////////////////////////////////////////////////////////////////////
// Syscalls

fn write(fd: int, s: void*, n: int): int {
    return syscall3(SYS_write, fd, s, n);
}

fn exit(status: int): int {
    return syscall1(SYS_exit, status);
}

fn read(fd: int, s: void*, n: int): int {
    return syscall3(SYS_read, fd, s, n);
}

fn open(path: char*, flags: int, mode: int): int {
    return syscall3(SYS_open, path, flags, mode);
}

fn close(fd: int): int {
    return syscall1(SYS_close, fd);
}

fn openat(fd: int, path: char*, flags: int, mode: int): int {
    return syscall4(SYS_openat, fd, path, flags, mode);
}

// fork() is a builtin because of OS-specific semantics.

fn wait(status: int*): int {
    return syscall4(SYS_wait4, -1, status, 0, 0);
}

fn lseek(fd: int, offset: int, whence: int): int {
    return syscall3(SYS_lseek, fd, offset, whence);
}

fn mmap(addr: void*, len: int, prot: int, flags: int, fd: int, offset: int): void* {
    return syscall6(SYS_mmap, addr, len, prot, flags, fd, offset);
}

fn execve(filename: char*, argv: char**, envp: char**): int {
    return syscall3(SYS_execve, filename, argv, envp);
}

///////////////////////////////////////////////////////////////////////////////
// Strings

fn strlen(s: char *): int {
    let count: int = 0;
    while (*s != 0) {
        count = count + 1;
        s = s + 1;
    }
    return count;
}

fn strcpy(dst: char *, src: char *) {
    while (*src != 0) {
        *dst = *src;
        dst = dst + 1;
        src = src + 1;
    }
    *dst = '\0';
}

fn strcat(dst: char *, src: char *) {
    while (*dst != 0) {
        dst = dst + 1;
    }
    while (*src != 0) {
        *dst = *src;
        dst = dst + 1;
        src = src + 1;
    }
    *dst = '\0';
}

fn strstartswith(s: char *, prefix: char *): int {
    while (*prefix) {
        if (*s != *prefix)
            return false;
        ++s;
        ++prefix;
    }
    return true;
}

fn streq(s1: char *, s2: char *): int {
    while (*s1 != 0 && *s2 != 0) {
        if (*s1 != *s2)
            return 0;
        s1 = s1 + 1;
        s2 = s2 + 1;
    }
    return *s1 == *s2;
}

fn strrev(s: char *) {
    let len: int = strlen(s);
    let i: int = 0;
    let j: int = len - 1;
    while (i < j) {
        let tmp: char = s[i];
        s[i] = s[j];
        s[j] = tmp;
        i = i + 1;
        j = j - 1;
    }
}

fn atoi_end(s: char *, end: char**): int {
    let i: int = 0;
    let sign: int = 1;
    if (*s == '-') {
        sign = -1;
        s = s + 1;
    }
    while (*s >= '0' && *s <= '9') {
        i = i * 10 + (*s - '0');
        s = s + 1;
    }
    *end = s;
    return i * sign;
}

fn atoi(s: char *): int {
    let tmp: char*;
    return atoi_end(s, &tmp);
}

fn find_extension_start(s: char*): int {
    let len = strlen(s);
    let i = len - 1;
    while (i >= 0) {
        if (s[i] == '.')
        return i;
        if (s[i] == '/')
        return len;
        --i;
    }
    return len;
}

fn replace_extension(path: char*, new_ext: char*) {
    let idx = find_extension_start(path);
    strcpy(path + idx, new_ext);
}

fn is_space(c: char): int {
    return c == ' ' || c == '\t' || c == '\n' || c == '\r';
}

fn is_digit(c: char): int {
    return c >= '0' && c <= '9';
}

fn is_alpha(c: char): int {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_';
}

fn is_alnum(c: char): int {
    return is_digit(c) || is_alpha(c);
}

fn is_hex(c: char): int {
    return is_digit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
}

fn is_octal(c: char): int {
    return c >= '0' && c <= '7';
}

///////////////////////////////////////////////////////////////////////////////
// I/O

const stdin = 0;
const stdout = 1;
const stderr = 2;

fn putc(c: char) {
    write(0, &c, 1);
}

fn puts(c: char *) {
    let len: int = strlen(c);
    write(1, c, len);
}

fn putsln(c: char *) {
    puts(c);
    putc('\n');
}

fn putu_buffer(n: int, buf: char*): int {
    let i: int = 0;
    while (n > 0) {
        buf[i] = (n % 10) + '0';
        n = n / 10;
        i = i + 1;
    }
    if (i == 0) {
        buf[i] = '0';
        i = i + 1;
    }
    buf[i] = 0;
    if (i > 1)
        strrev(buf);
    return i;
}

fn putu(n: int) {
    let buf: char[32];
    let len = putu_buffer(n, buf);
    write(stdout, buf, len);
}

fn putflt(f: f64) {
    let before: i64 = f;
    let after: f64 = f - before;
    if (before < 0) {
        putc('-');
        before = -before;
        after = -after;
    }
    putu(before);
    putc('.');
    for (let i = 0; i < 5; ++i) {
        let d: int = after * 10;
        putc(d + '0');
        after = after * 10 - d;
    }
}

// You want to call these functions with `here` as the first parameter.
fn die(sloc: char *, msg1: char *) {
    puts(sloc);
    puts(": ");
    putsln(msg1);
    exit(1);
}

fn die2(sloc: char *, msg1: char *, msg2: char*) {
    puts(sloc);
    puts(": ");
    puts(msg1);
    putsln(msg2);
    exit(1);
}

// TODO: file/line numbers would be helpful
fn assert(sloc: char*, cond: int) {
    if (!cond)
        die(sloc, "assertion failed");
}

///////////////////////////////////////////////////////////////////////////////
// Math

fn min(a: int, b: int): int {
    return a < b ? a : b;
}

fn max(a: int, b: int): int {
    return a > b ? a : b;
}

fn sign(a: int): int {
    return a > 0 ? 1 : a == 0 ? 0 : -1;
}

fn abs(a: int): int {
    return a * sign(a);
}

fn factorial(n: int): int {
    let res: int = 1;
    for (;n > 0; n = n - 1)
        res = res * n;
    return res;
}

fn align_up(val: int, algn: int): int {
    return (val + algn - 1) & ~(algn - 1);
}

///////////////////////////////////////////////////////////////////////////////
// Memory

// FIXME: This is horrible for performance.
fn memcpy(dst: void *, src: void *, n: int) {
    let _dst: char* = dst;
    let _src: char* = src;
    for (let i: int = 0; i < n; i = i + 1)
        _dst[i] = _src[i];
}

const __MALLOC_BUF_SIZE = 1024 * 1024 * 1024; // 1 GB
let __FREE_CLEAR_RESET_MEM = true;
let __malloc_buf: char[__MALLOC_BUF_SIZE];
let __malloc_buf_pos = 0;
let __malloc_init = false;

struct __MEM_SEGMENT{
	mem: int;
	ptr: int; // because of weird stuff with pointer calculations I used an array index
	next: __MEM_SEGMENT*;
	istaken: int;
}

// Initializes initial __MEM_SEGMENT
fn __malloc_init_proc(){
	if (!__malloc_init){
		let in_: void* =  &__malloc_buf[0];
		let initial_segment: __MEM_SEGMENT* = in_;
		initial_segment.mem = __MALLOC_BUF_SIZE - sizeof(__MEM_SEGMENT);
		initial_segment.ptr = sizeof(__MEM_SEGMENT);
		initial_segment.next = null;
		initial_segment.istaken = false;
		__malloc_init = true;
	}
}

fn transmute(ptr: char*): void*{
	let a: void* = ptr;
	return ptr;
}

fn malloc(size: int): void*{
	// get first __MEM_SEGMENT
	__malloc_init_proc();
	let in_: void* =  &__malloc_buf[0];
	let segment: __MEM_SEGMENT* = in_;
	while (true){
		if (!segment.istaken){
			if (((segment.mem - size) - sizeof(__MEM_SEGMENT)) > 0){
				// divides a segment into one with requested size and one with remaining memory
				
				let after = segment.next;
				let segment_mem = segment.mem;
				segment.mem = size;
				segment.next = transmute(&__malloc_buf[segment.ptr + size]);
				segment.istaken = true;
				
				let left_memory: __MEM_SEGMENT* = segment.next;
				left_memory.ptr = segment.ptr + size + sizeof(__MEM_SEGMENT);
				left_memory.istaken = false;
				left_memory.mem = segment_mem - size;
				left_memory.mem = left_memory.mem - sizeof(__MEM_SEGMENT);
				left_memory.next = after;
				
				return transmute(&__malloc_buf[segment.ptr]);
			} else{
				if (segment.next == null){
					die(here, "malloc: out of memory. only 1gb available");
					return null;
				}
				segment = segment.next;
			}
		} else{
			if (segment.next == null){
				die(here, "malloc: out of memory. only 1gb available");
				return null;
			}
			
			segment = segment.next;
		}
	}
}

fn __free_clear_ptr(ptr: int, mem: int){
	for (let i: int = 0; i < mem; ++i){
		__malloc_buf[ptr+i] = 0;
	}
}

fn __find_segment_by_ptr(ptr: void*): __MEM_SEGMENT*{
	let in_: void* =  &__malloc_buf[0];
	let prv_segment: __MEM_SEGMENT* = null;
	let segment: __MEM_SEGMENT* = in_;
	while (true){
		if (&__malloc_buf[segment.ptr] == ptr){
			return segment;
		} else{
			
			if (segment.next == null){
				die(here, "didn't find malloc cell");
				return null;
			}
			
			prv_segment = segment;
			segment = segment.next;
		}
	}
	
	return null;
}

fn free(ptr: void*) {
	__malloc_init_proc();
	let segment: __MEM_SEGMENT* = __find_segment_by_ptr(ptr);
	
	// this behaviour can be disabled
	if (__FREE_CLEAR_RESET_MEM){
		__free_clear_ptr(segment.ptr, segment.mem);
	}
	
	segment.istaken = false;
} 

fn realloc(ptr: void*, size:int): void*{
	if (size < 0){
		die(here, "realloc: size can't be a negative int");
		return null;
	} else if (size == 0) {
		die(here, "realloc: size can't be zero; use free instead");
		return null;
	}
	
	let segment: __MEM_SEGMENT* = __find_segment_by_ptr(ptr);
	
	if (segment.mem >= size){
		die(here, "realloc: you can't realloc a memory cell into a cell with a smaller size");
		return null;
	}
	
	let new_mem: void* = malloc(size);
	memcpy(new_mem, ptr, segment.mem);
	free(ptr);
	return new_mem;
}

fn __dbg_malloc(){
	__malloc_init_proc();
	
	let in_: void* =  &__malloc_buf[__malloc_buf_pos];
	let segment: __MEM_SEGMENT* = in_;
	
	putsln("DEBUG MALLOC");
	while (segment != null){
		putsln("=== SEGMENT: ");
		putsln("PTR: ");
		print(segment.ptr);
		putsln("MEM: ");
		print(segment.mem);
		putsln("NEXT: ");
		print(segment.next);
		if (segment.istaken){
			putsln("TAKEN");
		}
		putsln("===");
		segment = segment.next;
	}
}

///////////////////////////////////////////////////////////////////////////////
// External processes

fn WIFEXITED(status: int): int {
    return (status & 127) == 0;
}

fn WEXITSTATUS(status: int): int {
    return (status >> 8) & 127;
}

fn run_command_env(args: char**, envp: char**, echo: int) {
    if (echo) {
        puts("[+]");
        for (let c = args; *c; ++c) {
            puts(" "); puts(*c);
        }
        puts("\n");
    }

    let pid = fork();
    if (pid == 0) {
        execve(args[0], args, envp);
        die(here, "Error in execve()");
    }
    // Parent
    let status: int;
    if (wait(&status) < 0)
        die(here, "Error in wait()");

    if (!WIFEXITED(status))
        die(here, "Child did not exit normally");

    let exit_status = WEXITSTATUS(status);
    if (exit_status != 0) {
        puts(here); puts(": Child exited with non-zero status: (");
        putu(exit_status);
        putsln(")");
        exit(exit_status);
    }
}

fn run_command(args: char**, echo: int) {
    run_command_env(args, null, echo);
}