import "std/common.cup"
import "std/memory.cup"

struct Vector {
    size: int;
    capacity: int;
    data: void**;
};

fn vector_new_sized(capacity: int): Vector* {
    let t: Vector* = malloc(sizeof(Vector));
    t.size = 0;
    t.capacity = capacity;
    t.data = malloc(capacity * sizeof(void*));
    return t;
}

fn vector_new(): Vector* {
    let initial_default_capacity = 8;
    return vector_new_sized(initial_default_capacity);
}

method Vector::empty(): int {
    return self.size == 0;
}

method Vector::at(index: int): void* {
    if (index < 0 || index >= self.size)
        die(here, "Vector::at: index out of bounds");
    return self.data[index];
}

method Vector::push(item: void*) {
    if (self.size == self.capacity) {
        let new_capacity = self.capacity * 2;
        let new_data = malloc(new_capacity * sizeof(void*));
        memcpy(new_data, self.data, self.capacity * sizeof(void*));
        self.data = new_data;
        self.capacity = new_capacity;
    }
    self.data[self.size] = item;
    self.size = self.size + 1;
}

method Vector::pop(): void* {
    if (self.size == 0)
        die(here, "Vector is empty, nothing to pop.");

    self.size = self.size - 1;
    return self.data[self.size];
}

method Vector::top(): void* {
    if (self.size == 0)
        die(here, "Vector is empty, nothing to return.");

    return self.data[self.size - 1];
}